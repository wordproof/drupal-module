<?php

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\wordproof\Timestamp\TimestampInterface;

/**
 * @SEE hook_entity_create()
 */
function wordproof_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  if (!$entity instanceof ContentEntityInterface || $entity instanceof TimestampInterface) {
    return FALSE;
  }
  if (method_exists($entity, 'isPublished') && $entity->isPublished() === FALSE) {
    return FALSE;
  }

  \Drupal::logger('wordproof')->debug('function' . __FUNCTION__);
  \Drupal::logger('wordproof')->debug('type' . $entity->getEntityTypeId());
  \Drupal::logger('wordproof')->debug('bundle' . $entity->bundle());
  \Drupal::logger('wordproof')->debug('label' . $entity->label());

  \Drupal::service('wordproof.timestamp_builder_service')->stamp($entity);
}

/* Start with new node support only */
function wordproof_entity_update(\Drupal\Core\Entity\EntityInterface $entity) {
  if (!$entity instanceof ContentEntityInterface || $entity instanceof TimestampInterface) {
    return;
  }

  if (method_exists($entity, 'isPublished') && $entity->isPublished() === FALSE) {
    return;
  }

  \Drupal::logger('wordproof')->debug('function' . __FUNCTION__);
  \Drupal::logger('wordproof')->debug('type' . $entity->getEntityTypeId());
  \Drupal::logger('wordproof')->debug('bundle' . $entity->bundle());
  \Drupal::logger('wordproof')->debug('label' . $entity->label());

  \Drupal::service('wordproof.timestamp_builder_service')->stamp($entity);
}

/**
 * Implements hook_theme().
 */
function wordproof_theme($existing, $type, $theme, $path) {
  return [
    'wordproof_certificate' => [
      'variables' => ['timestamp' => NULL],
    ],
  ];
}
